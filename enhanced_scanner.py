#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π OpenAI –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
–í–µ—Ä—Å–∏—è 2.0 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
"""

import requests
import re
import time
import json
import os
from typing import List, Dict, Set
from urllib.parse import quote
import base64
import openai
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


class EnhancedGitHubOpenAIScanner:
    def __init__(self, github_token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
        
        Args:
            github_token: –¢–æ–∫–µ–Ω GitHub API –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        self.github_token = github_token
        self.session = requests.Session()
        if github_token:
            self.session.headers.update({
                'Authorization': f'token {github_token}',
                'Accept': 'application/vnd.github.v3+json'
            })
        
        self.valid_keys = []
        self.tested_keys = set()
        self.processed_files = set()
        
        # –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self.cache_file = 'scanner_cache.json'
        self.processed_repos_file = 'processed_repositories.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.ensure_files_exist()
        self.load_cache()
        self.load_valid_keys()
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ OpenAI API –∫–ª—é—á–µ–π
        self.api_key_patterns = [
            re.compile(r'sk-[A-Za-z0-9]{48}'),  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: 48 —Å–∏–º–≤–æ–ª–æ–≤
            re.compile(r'sk-proj-[A-Za-z0-9\-_]{95,200}'),  # –ù–æ–≤—ã–π project —Ñ–æ—Ä–º–∞—Ç
            re.compile(r'sk-[A-Za-z0-9\-_]{40,200}'),  # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª—é–±—ã—Ö sk- –∫–ª—é—á–µ–π
            re.compile(r'sk-[a-zA-Z0-9]{20}T3BlbkFJ[a-zA-Z0-9]{20}'),  # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω OpenAI
        ]
        
        print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–∫–∞–Ω–µ—Ä {'—Å —Ç–æ–∫–µ–Ω–æ–º GitHub' if github_token else '–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ GitHub'}")

    def load_cache(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                    self.processed_files = set(cache_data.get('processed_files', []))
                    self.tested_keys = set(cache_data.get('tested_keys', []))
                    
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {len(self.processed_files)} —Ñ–∞–π–ª–æ–≤, {len(self.tested_keys)} –∫–ª—é—á–µ–π")
            else:
                print("üìÇ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            self.processed_files = set()
            self.tested_keys = set()

    def load_valid_keys(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        try:
            output_file = os.getenv('OUTPUT_FILE', 'enhanced_valid_openai_keys.json')
            if os.path.exists(output_file):
                with open(output_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    existing_keys = data.get('valid_keys', [])
                    self.valid_keys.extend(existing_keys)
                    
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_keys)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
            else:
                print("üìÑ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: {e}")

    def ensure_files_exist(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        output_file = os.getenv('OUTPUT_FILE', 'enhanced_valid_openai_keys.json')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(output_file):
            initial_data = {
                'scan_info': {
                    'timestamp': datetime.now().isoformat(),
                    'total_keys_tested': 0,
                    'valid_keys_found': 0,
                    'files_processed': 0,
                    'success_rate': "0%"
                },
                'valid_keys': []
            }
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(initial_data, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫—ç—à–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self.cache_file):
            initial_cache = {
                'processed_files': [],
                'tested_keys': [],
                'last_updated': datetime.now().isoformat()
            }
            try:
                with open(self.cache_file, 'w', encoding='utf-8') as f:
                    json.dump(initial_cache, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {self.cache_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∫—ç—à–∞: {e}")

    def save_cache(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        try:
            cache_data = {
                'processed_files': list(self.processed_files),
                'tested_keys': list(self.tested_keys),
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def clear_cache(self):
        """
        –û—á–∏—â–∞–µ—Ç –∫—ç—à (—É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∫—ç—à–∞)
        """
        try:
            if os.path.exists(self.cache_file):
                os.remove(self.cache_file)
            if os.path.exists(self.processed_repos_file):
                os.remove(self.processed_repos_file)
            
            self.processed_files = set()
            self.tested_keys = set()
            print("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

    def get_cache_stats(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        """
        return {
            'processed_files': len(self.processed_files),
            'tested_keys': len(self.tested_keys),
            'cache_file_exists': os.path.exists(self.cache_file),
            'cache_file_size': os.path.getsize(self.cache_file) if os.path.exists(self.cache_file) else 0
        }

    def test_validation_function(self, test_key: str) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–ª—é—á–æ–º
        
        Args:
            test_key: API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_key[:15]}...{test_key[-10:]} (–¥–ª–∏–Ω–∞: {len(test_key)})")
        
        try:
            result = self.validate_openai_key(test_key)
            if result:
                print("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                print("   –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                print("‚ùå –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª–∞ False –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞")
                print("   –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    def get_search_queries(self, include_recent: bool = True) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            include_recent: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        base_queries = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            'OPENAI_API_KEY',
            'sk- AND openai',
            'openai.api_key',
            '"sk-" AND (openai OR gpt)',
            
            # –ù–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–µ–π
            'sk-proj AND openai',
            '"sk-proj-" AND api',
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            'OPENAI_API_KEY AND .env',
            'OPENAI_API_KEY AND config',
            'openai_api_key AND settings',
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ
            'openai.api_key AND python',
            'OpenAI AND javascript',
            'api_key AND typescript',
            
            # –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            'OPENAI_API_KEY AND README',
            'openai AND setup',
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
            'OPENAI_API_KEY AND dockerfile',
            'openai AND docker-compose',
        ]
        
        if include_recent:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–µ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤
            recent_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
            recent_queries = [
                f'sk- pushed:>{recent_date}',
                f'OPENAI_API_KEY created:>{recent_date}',
                f'openai api_key updated:>{recent_date}',
            ]
            base_queries.extend(recent_queries)
        
        return base_queries

    def search_github_code(self, query: str, max_pages: int = 5, sort_by: str = "indexed") -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –≤ GitHub –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
        """
        results = []
        
        for page in range(1, max_pages + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            if not self.should_continue_scanning():
                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API")
                break
            
            try:
                url = f"https://api.github.com/search/code"
                params = {
                    'q': query,
                    'page': page,
                    'per_page': 100,
                    'sort': sort_by,
                    'order': 'desc'
                }
                
                response = self.session.get(url, params=params)
                
                if response.status_code == 403:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–æ –ª–∏ —ç—Ç–æ —Å –ª–∏–º–∏—Ç–∞–º–∏
                    if 'rate limit' in response.text.lower():
                        print(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
                        self.wait_for_rate_limit_reset('search')
                        continue
                    
                    reset_time = response.headers.get('X-RateLimit-Reset')
                    if reset_time:
                        reset_datetime = datetime.fromtimestamp(int(reset_time))
                        wait_time = (reset_datetime - datetime.now()).total_seconds()
                        print(f"‚è∞ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {int(wait_time/60)} –º–∏–Ω—É—Ç –¥–æ {reset_datetime.strftime('%H:%M:%S')}")
                        time.sleep(min(wait_time, 3600))  # –ú–∞–∫—Å–∏–º—É–º —á–∞—Å –æ–∂–∏–¥–∞–Ω–∏—è
                    else:
                        time.sleep(60)
                    continue
                    
                if response.status_code == 422:
                    print(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                    break
                    
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                    break
                    
                data = response.json()
                
                if 'items' not in data:
                    break
                
                print(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(data['items'])} —Ñ–∞–π–ª–æ–≤")
                results.extend(data['items'])
                
                if len(data['items']) < 100:
                    break
                    
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(2 if self.github_token else 10)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{query}': {e}")
                break
                
        return results

    def get_file_content(self, file_info: Dict) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
        """
        try:
            url = file_info.get('url')
            if not url:
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = file_info.get('size', 0)
            if file_size > 1048576:  # 1MB
                print(f"    üìè –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size} –±–∞–π—Ç)")
                return ""
                
            response = self.session.get(url)
            
            if response.status_code == 403:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã Core API
                if 'rate limit' in response.text.lower():
                    print("    üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Core API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                    self.wait_for_rate_limit_reset('core')
                    return ""
                else:
                    print("    ‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (403)")
                    time.sleep(60)
                    return ""
                
            if response.status_code != 200:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
                return ""
                
            data = response.json()
            
            if data.get('encoding') == 'base64':
                content = base64.b64decode(data['content']).decode('utf-8', errors='ignore')
                return content
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            
        return ""

    def extract_api_keys(self, content: str) -> Set[str]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        keys = set()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.api_key_patterns:
            matches = pattern.findall(content)
            keys.update(matches)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        context_patterns = [
            # –í –∫–∞–≤—ã—á–∫–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
            r'["\']sk-[A-Za-z0-9\-_]{20,200}["\']',
            r'[`]sk-[A-Za-z0-9\-_]{20,200}[`]',
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            r'(?i)(?:OPENAI_API_KEY|OPENAI_KEY|API_KEY)[^a-zA-Z0-9]*[=:][^a-zA-Z0-9]*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–¥–µ
            r'(?i)(?:openai|client)[_\.](?:api[_\.])?key[^a-zA-Z0-9]*[=:][^a-zA-Z0-9]*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            r'(?i)(?:api_key|apikey|token)[^a-zA-Z0-9]*[=:][^a-zA-Z0-9]*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # JSON/YAML —Ñ–æ—Ä–º–∞—Ç—ã
            r'["\'](?:api_key|openai_api_key|key|token)["\'][^a-zA-Z0-9]*:[^a-zA-Z0-9]*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # Python —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
            r'(?i)api_key\s*=\s*[rf]?["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            r'(?i)OpenAI\s*\([^)]*api_key\s*=\s*[rf]?["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # JavaScript/TypeScript
            r'(?i)(?:api_?key|apikey)\s*:\s*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
            r'(?i)Authorization[^a-zA-Z0-9]*:[^a-zA-Z0-9]*Bearer\s+(sk-[A-Za-z0-9\-_]{20,200})',
            r'(?i)X-API-Key[^a-zA-Z0-9]*:[^a-zA-Z0-9]*["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            r'(?i)--(?:api-)?key\s+["\']?(sk-[A-Za-z0-9\-_]{20,200})["\']?',
            
            # URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            r'(?i)(?:api_key|key)=(sk-[A-Za-z0-9\-_]{20,200})',
        ]
        
        for pattern in context_patterns:
            matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
            for match in matches:
                if isinstance(match, tuple):
                    key = next((m for m in reversed(match) if m), "")
                else:
                    key = match
                    
                key = key.strip('\'"` \t\n\r;,')
                
                if key.startswith('sk-') and len(key) >= 20:
                    keys.add(key)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ "–≥–æ–ª—ã—Ö" –∫–ª—é—á–µ–π
        loose_pattern = r'\bsk-[A-Za-z0-9\-_]{20,200}\b'
        loose_matches = re.findall(loose_pattern, content)
        for key in loose_matches:
            if len(key) >= 20:
                keys.add(key)
        
        return keys

    def validate_openai_key(self, api_key: str) -> bool:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ OpenAI
        """
        try:
            client = OpenAI(api_key=api_key)
            response = client.models.list()
            
            if response and hasattr(response, 'data'):
                return len(response.data) > 0
                
        except Exception as e:
            error_str = str(e).lower()
            if any(err in error_str for err in ['invalid api key', 'invalid_api_key', 'unauthorized', 'incorrect api key']):
                return False
            elif any(err in error_str for err in ['quota', 'rate limit', 'billing']):
                print(f"    –ö–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {error_str}")
                return True
            else:
                print(f"    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error_str}")
                
        return False

    def scan_repositories(self, max_pages_per_query: int = 3, sort_by: str = "updated") -> List[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        """
        print("üîç –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        print(f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_by}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å: {max_pages_per_query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.print_rate_limits()
        
        if not self.should_continue_scanning():
            print("‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API")
            return []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = self.get_cache_stats()
        print(f"üìÇ –ö—ç—à: {cache_stats['processed_files']} —Ñ–∞–π–ª–æ–≤, {cache_stats['tested_keys']} –∫–ª—é—á–µ–π")
        
        search_queries = self.get_search_queries(include_recent=True)
        files_processed_in_session = 0
        
        try:
            for i, query in enumerate(search_queries, 1):
                print(f"\nüîé –ó–∞–ø—Ä–æ—Å {i}/{len(search_queries)}: {query}")
                
                files = self.search_github_code(query, max_pages_per_query, sort_by)
                print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                new_files = [f for f in files if f.get('url') not in self.processed_files]
                if len(new_files) < len(files):
                    print(f"   üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {len(files) - len(new_files)}")
                
                for j, file_info in enumerate(new_files, 1):
                    file_url = file_info.get('url')
                    self.processed_files.add(file_url)
                    files_processed_in_session += 1
                    
                    repo_info = file_info.get('repository', {})
                    file_name = file_info.get('name', 'unknown')
                    updated_at = repo_info.get('updated_at', 'unknown')[:10]
                    
                    print(f"üìÑ –§–∞–π–ª {j}/{len(new_files)}: {file_name} (–æ–±–Ω–æ–≤–ª–µ–Ω: {updated_at})")
                    
                    content = self.get_file_content(file_info)
                    if not content:
                        continue
                    
                    api_keys = self.extract_api_keys(content)
                    
                    for key in api_keys:
                        if key in self.tested_keys:
                            key_preview = f"{key[:15]}...{key[-10:]}" if len(key) > 25 else key[:20] + "..."
                            print(f"üîÑ –ö–ª—é—á —É–∂–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è: {key_preview}")
                            continue
                            
                        self.tested_keys.add(key)
                        key_preview = f"{key[:15]}...{key[-10:]}" if len(key) > 25 else key[:20] + "..."
                        print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á: {key_preview} (–¥–ª–∏–Ω–∞: {len(key)})")
                        
                        if self.validate_openai_key(key):
                            print(f"‚úÖ –í–ê–õ–ò–î–ù–´–ô –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù!")
                            key_data = {
                                'key': key,
                                'repository': repo_info.get('full_name', 'unknown'),
                                'file_path': file_info.get('path', 'unknown'),
                                'file_url': file_info.get('html_url', ''),
                                'updated_at': updated_at,
                                'size': file_info.get('size', 0),
                                'found_at': datetime.now().isoformat()
                            }
                            self.valid_keys.append(key_data)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á —Å—Ä–∞–∑—É –≤ —Ñ–∞–π–ª
                            self.add_valid_key_to_file(key_data)
                        else:
                            print(f"‚ùå –ö–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π")
                        
                        # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        time.sleep(4)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    if files_processed_in_session % 10 == 0:
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
                        self.save_cache()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                        if files_processed_in_session % 20 == 0:
                            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API...")
                            if not self.should_continue_scanning():
                                print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
                                return self.valid_keys
                        
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
            self.save_cache()
            raise
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫—ç—à
        self.save_cache()
        print(f"\nüìä –í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {files_processed_in_session}")
        
        return self.valid_keys

    def save_results(self, filename: str = None):
        if filename is None:
            filename = os.getenv('OUTPUT_FILE', 'enhanced_valid_openai_keys.json')
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª—é—á–∏)
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {'valid_keys': []}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            data['scan_info'] = {
                'timestamp': datetime.now().isoformat(),
                'total_keys_tested': len(self.tested_keys),
                'valid_keys_found': len(data.get('valid_keys', [])),
                'files_processed': len(self.processed_files),
                'success_rate': f"{len(data.get('valid_keys', []))/len(self.tested_keys)*100:.2f}%" if self.tested_keys else "0%"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
            print(f"{'='*50}")
            print(f"üîç –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: {len(self.tested_keys)}")
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(data.get('valid_keys', []))}")
            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.processed_files)}")
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {data['scan_info']['success_rate']}")
            print(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_valid_key_to_file(self, key_data: Dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á —Å—Ä–∞–∑—É –≤ —Ñ–∞–π–ª (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        """
        try:
            output_file = os.getenv('OUTPUT_FILE', 'enhanced_valid_openai_keys.json')
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(output_file):
                with open(output_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {
                    'scan_info': {
                        'timestamp': datetime.now().isoformat(),
                        'total_keys_tested': 0,
                        'valid_keys_found': 0,
                        'files_processed': 0,
                        'success_rate': "0%"
                    },
                    'valid_keys': []
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞
            existing_keys = [k['key'] for k in data.get('valid_keys', [])]
            if key_data['key'] not in existing_keys:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
                data['valid_keys'].append(key_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                data['scan_info'].update({
                    'timestamp': datetime.now().isoformat(),
                    'total_keys_tested': len(self.tested_keys),
                    'valid_keys_found': len(data['valid_keys']),
                    'files_processed': len(self.processed_files),
                    'success_rate': f"{len(data['valid_keys'])/len(self.tested_keys)*100:.2f}%" if self.tested_keys else "0%"
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                
                print(f"üíæ –í–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ {output_file}")
                return True
            else:
                print(f"üîÑ –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª: {e}")
            return False

    def check_rate_limits(self) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã GitHub API
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
        """
        try:
            response = self.session.get("https://api.github.com/rate_limit")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
                search_limits = data.get('resources', {}).get('search', {})
                core_limits = data.get('resources', {}).get('core', {})
                
                return {
                    'search': {
                        'limit': search_limits.get('limit', 0),
                        'remaining': search_limits.get('remaining', 0),
                        'reset_time': search_limits.get('reset', 0),
                        'reset_datetime': datetime.fromtimestamp(search_limits.get('reset', 0)) if search_limits.get('reset') else None
                    },
                    'core': {
                        'limit': core_limits.get('limit', 0),
                        'remaining': core_limits.get('remaining', 0),
                        'reset_time': core_limits.get('reset', 0),
                        'reset_datetime': datetime.fromtimestamp(core_limits.get('reset', 0)) if core_limits.get('reset') else None
                    },
                    'status': 'success'
                }
            else:
                return {
                    'status': 'error',
                    'error': f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    def print_rate_limits(self):
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–∞—Ö GitHub API
        """
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ GitHub API...")
        limits = self.check_rate_limits()
        
        if limits['status'] == 'success':
            search = limits['search']
            core = limits['core']
            
            print(f"üìä –õ–ò–ú–ò–¢–´ GITHUB API")
            print("-" * 50)
            print(f"üîé Search API:")
            print(f"   –õ–∏–º–∏—Ç: {search['limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {search['remaining']} –∑–∞–ø—Ä–æ—Å–æ–≤")
            if search['reset_datetime']:
                print(f"   –°–±—Ä–æ—Å: {search['reset_datetime'].strftime('%H:%M:%S')}")
            
            print(f"üåê Core API:")
            print(f"   –õ–∏–º–∏—Ç: {core['limit']} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
            print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {core['remaining']} –∑–∞–ø—Ä–æ—Å–æ–≤")
            if core['reset_datetime']:
                print(f"   –°–±—Ä–æ—Å: {core['reset_datetime'].strftime('%H:%M:%S')}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –ª–∏–º–∏—Ç–∞—Ö
            if search['remaining'] < 10:
                print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Search API!")
            
            if core['remaining'] < 100:
                print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Core API!")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {limits.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print("-" * 50)

    def should_continue_scanning(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–º–∏—Ç–æ–≤ API
        
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, False –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        """
        limits = self.check_rate_limits()
        
        if limits['status'] != 'success':
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã: {limits.get('error')}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        
        search_remaining = limits['search']['remaining']
        core_remaining = limits['core']['remaining']
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        min_search_requests = 5   # –î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        min_core_requests = 20    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
        
        if search_remaining < min_search_requests:
            reset_time = limits['search']['reset_datetime']
            if reset_time:
                wait_minutes = (reset_time - datetime.now()).total_seconds() / 60
                print(f"üõë –ò—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã Search API ({search_remaining} –æ—Å—Ç–∞–ª–æ—Å—å). –û–∂–∏–¥–∞–Ω–∏–µ {wait_minutes:.1f} –º–∏–Ω—É—Ç –¥–æ —Å–±—Ä–æ—Å–∞.")
            else:
                print(f"üõë –ò—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã Search API ({search_remaining} –æ—Å—Ç–∞–ª–æ—Å—å).")
            return False
        
        if core_remaining < min_core_requests:
            reset_time = limits['core']['reset_datetime']
            if reset_time:
                wait_minutes = (reset_time - datetime.now()).total_seconds() / 60
                print(f"üõë –ò—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã Core API ({core_remaining} –æ—Å—Ç–∞–ª–æ—Å—å). –û–∂–∏–¥–∞–Ω–∏–µ {wait_minutes:.1f} –º–∏–Ω—É—Ç –¥–æ —Å–±—Ä–æ—Å–∞.")
            else:
                print(f"üõë –ò—Å—á–µ—Ä–ø–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã Core API ({core_remaining} –æ—Å—Ç–∞–ª–æ—Å—å).")
            return False
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –ª–∏–º–∏—Ç–∞—Ö
        if search_remaining < min_search_requests * 2:
            print(f"‚ö†Ô∏è –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ Search API: {search_remaining}")
        
        if core_remaining < min_core_requests * 2:
            print(f"‚ö†Ô∏è –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ Core API: {core_remaining}")
        
        return True

    def wait_for_rate_limit_reset(self, api_type: str = 'search'):
        """
        –û–∂–∏–¥–∞–µ—Ç —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ API
        
        Args:
            api_type: 'search' –∏–ª–∏ 'core'
        """
        limits = self.check_rate_limits()
        
        if limits['status'] != 'success':
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö, –æ–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            return
        
        api_limits = limits.get(api_type, {})
        reset_datetime = api_limits.get('reset_datetime')
        
        if reset_datetime:
            wait_time = (reset_datetime - datetime.now()).total_seconds()
            if wait_time > 0:
                wait_minutes = wait_time / 60
                print(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ {api_type.upper()} API: {wait_minutes:.1f} –º–∏–Ω—É—Ç...")
                
                # –ñ–¥–µ–º —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                while wait_time > 0:
                    if wait_time > 300:  # –ë–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
                        print(f"   –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {wait_time/60:.1f} –º–∏–Ω—É—Ç")
                        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                        wait_time -= 60
                    else:
                        time.sleep(wait_time)
                        break
                
                print(f"‚úÖ –õ–∏–º–∏—Ç—ã {api_type.upper()} API –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω—ã")
            else:
                print(f"‚úÖ –õ–∏–º–∏—Ç—ã {api_type.upper()} API —É–∂–µ —Å–±—Ä–æ—à–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
    

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    """
    print("üöÄ ENHANCED GITHUB OPENAI SCANNER v2.1 (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)")
    print("="*60)
    
    github_token = os.getenv('GITHUB_TOKEN')
    scanner = EnhancedGitHubOpenAIScanner(github_token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    import sys
    if len(sys.argv) > 1 and sys.argv[1] in ['--clear-cache', '--reset', '-r']:
        print("\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê")
        print("-" * 50)
        scanner.clear_cache()
        print("–ö—ç—à –æ—á–∏—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫—ç—à—É
    cache_stats = scanner.get_cache_stats()
    if cache_stats['processed_files'] > 0:
        print(f"\nüìÇ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–≠–®–ï")
        print("-" * 50)
        print(f"üóÇÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cache_stats['processed_files']}")
        print(f"üîë –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {cache_stats['tested_keys']}")
        print(f"üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {cache_stats['cache_file_size']} –±–∞–π—Ç")
        print("\nüí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python enhanced_scanner.py --clear-cache")
        print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OPENAI_API_KEY –≤ .env –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_openai_key = os.getenv('OPENAI_API_KEY')
    if test_openai_key:
        print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("-" * 50)
        validation_works = scanner.test_validation_function(test_openai_key)
        
        if not validation_works:
            print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
            print("   - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
            print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            print("   - –ö–≤–æ—Ç—ã –∏ –ª–∏–º–∏—Ç—ã OpenAI API")
            
            response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/N): ").strip().lower()
            if response not in ['y', 'yes', '–¥', '–¥–∞']:
                print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return
        
        print("\n" + "="*60)
    else:
        print("\n‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("   –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ")
        print("   –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–∞—Ö")
        print("\n" + "="*60)
    
    try:
        print("\nüîç –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("-" * 50)
        valid_keys = scanner.scan_repositories(max_pages_per_query=2, sort_by="updated")
        scanner.save_results()
        
        if valid_keys:
            print(f"\nüéâ –ù–ê–ô–î–ï–ù–ù–´–ï –í–ê–õ–ò–î–ù–´–ï –ö–õ–Æ–ß–ò:")
            for i, key_info in enumerate(valid_keys, 1):
                key_preview = f"{key_info['key'][:15]}...{key_info['key'][-10:]}"
                print(f"{i}. üîë {key_preview}")
                print(f"   üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {key_info['repository']}")
                print(f"   üìÑ –§–∞–π–ª: {key_info['file_path']}")
                print(f"   üïí –û–±–Ω–æ–≤–ª–µ–Ω: {key_info['updated_at']}")
                print()
        else:
            print("\nü§∑ –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞...")
        scanner.save_cache()
        scanner.save_results('partial_enhanced_results.json')
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞...")
        scanner.save_cache()
        scanner.save_results('error_enhanced_results.json')


if __name__ == "__main__":
    main()

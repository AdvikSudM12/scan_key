"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ API –∫–ª—é—á–µ–π
"""

import yaml
import os
import argparse
from dataclasses import dataclass
from typing import Optional, Dict, Any, List
from pathlib import Path


@dataclass
class ScanConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    max_pages_per_query: int = 3
    delay_between_requests: float = 1.0
    delay_between_key_tests: float = 2.0
    max_concurrent_files: int = 10
    timeout_seconds: int = 30
    include_recent: bool = True
    recent_days: int = 30


@dataclass
class CacheConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∞"""
    cache_file: str = 'scanner_cache.json'
    auto_save_threshold: int = 10
    use_sqlite: bool = False
    sqlite_file: str = 'scanner_cache.db'


@dataclass
class LoggingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level: str = 'INFO'
    file: str = 'scanner.log'
    max_size_mb: int = 10
    backup_count: int = 5
    format: str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'


@dataclass
class SecurityConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    mask_keys_in_logs: bool = True
    mask_keys_in_cache: bool = True
    mask_keys_in_output: bool = True
    save_full_keys: bool = False


@dataclass
class GitHubConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitHub API"""
    token: Optional[str] = None
    api_url: str = 'https://api.github.com'
    user_agent: str = 'Enhanced-Multi-Provider-Scanner/4.0'
    rate_limit_buffer: int = 5


@dataclass
class Config:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    scan: ScanConfig
    cache: CacheConfig
    logging: LoggingConfig
    security: SecurityConfig
    github: GitHubConfig
    
    # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_files: Dict[str, str]
    
    def __init__(self):
        self.scan = ScanConfig()
        self.cache = CacheConfig()
        self.logging = LoggingConfig()
        self.security = SecurityConfig()
        self.github = GitHubConfig()
        
        self.output_files = {
            'openai': 'valid_openai_keys.json',
            'anthropic': 'valid_anthropic_keys.json',
            'google_gemini': 'valid_google_gemini_keys.json'
        }


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    DEFAULT_CONFIG_FILE = 'config.yaml'
    ENV_PREFIX = 'SCANNER_'
    
    def __init__(self, config_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_file = config_file or self.DEFAULT_CONFIG_FILE
        self.config = Config()
    
    def load_config(self) -> Config:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
        1. –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        3. –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML
        4. –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Returns:
            Config: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ YAML
        self._load_from_yaml()
        
        # 2. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._load_from_env()
        
        # 3. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self._load_from_args()
        
        return self.config
    
    def _load_from_yaml(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.config_file):
            print(f"üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                yaml_data = yaml.safe_load(f)
            
            if yaml_data:
                self._update_config_from_dict(yaml_data)
                print(f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {self.config_file}: {e}")
    
    def _load_from_env(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_mappings = {
            f'{self.ENV_PREFIX}GITHUB_TOKEN': ('github', 'token'),
            f'{self.ENV_PREFIX}MAX_PAGES': ('scan', 'max_pages_per_query'),
            f'{self.ENV_PREFIX}DELAY_REQUESTS': ('scan', 'delay_between_requests'),
            f'{self.ENV_PREFIX}DELAY_TESTS': ('scan', 'delay_between_key_tests'),
            f'{self.ENV_PREFIX}MAX_CONCURRENT': ('scan', 'max_concurrent_files'),
            f'{self.ENV_PREFIX}CACHE_FILE': ('cache', 'cache_file'),
            f'{self.ENV_PREFIX}USE_SQLITE': ('cache', 'use_sqlite'),
            f'{self.ENV_PREFIX}LOG_LEVEL': ('logging', 'level'),
            f'{self.ENV_PREFIX}LOG_FILE': ('logging', 'file'),
            f'{self.ENV_PREFIX}MASK_KEYS': ('security', 'mask_keys_in_logs'),
        }
        
        # –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if os.getenv('GITHUB_TOKEN'):
            self.config.github.token = os.getenv('GITHUB_TOKEN')
        
        for env_var, (section, key) in env_mappings.items():
            value = os.getenv(env_var)
            if value is not None:
                self._set_config_value(section, key, value)
    
    def _load_from_args(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        parser = argparse.ArgumentParser(description='Enhanced Multi-Provider GitHub Scanner')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parser.add_argument('--config', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
        parser.add_argument('--github-token', type=str, help='–¢–æ–∫–µ–Ω GitHub API')
        parser.add_argument('--max-pages', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å')
        parser.add_argument('--delay-requests', type=float, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)')
        parser.add_argument('--delay-tests', type=float, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –∫–ª—é—á–µ–π (—Å–µ–∫)')
        parser.add_argument('--max-concurrent', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
        parser.add_argument('--log-level', type=str, choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
        parser.add_argument('--log-file', type=str, help='–§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤')
        parser.add_argument('--cache-file', type=str, help='–§–∞–π–ª –∫—ç—à–∞')
        parser.add_argument('--use-sqlite', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLite –¥–ª—è –∫—ç—à–∞')
        parser.add_argument('--no-mask-keys', action='store_true', help='–ù–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –≤ –≤—ã–≤–æ–¥–µ')
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        parser.add_argument('--clear-cache', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º')
        parser.add_argument('--async-mode', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º')
        parser.add_argument('--test-mode', action='store_true', help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è)')
        
        # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        args, unknown = parser.parse_known_args()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if args.github_token:
            self.config.github.token = args.github_token
        if args.max_pages:
            self.config.scan.max_pages_per_query = args.max_pages
        if args.delay_requests:
            self.config.scan.delay_between_requests = args.delay_requests
        if args.delay_tests:
            self.config.scan.delay_between_key_tests = args.delay_tests
        if args.max_concurrent:
            self.config.scan.max_concurrent_files = args.max_concurrent
        if args.log_level:
            self.config.logging.level = args.log_level
        if args.log_file:
            self.config.logging.file = args.log_file
        if args.cache_file:
            self.config.cache.cache_file = args.cache_file
        if args.use_sqlite:
            self.config.cache.use_sqlite = True
        if args.no_mask_keys:
            self.config.security.mask_keys_in_logs = False
            self.config.security.mask_keys_in_output = False
    
    def _update_config_from_dict(self, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        for section_name, section_data in data.items():
            if hasattr(self.config, section_name) and isinstance(section_data, dict):
                section = getattr(self.config, section_name)
                for key, value in section_data.items():
                    if hasattr(section, key):
                        setattr(section, key, value)
            elif section_name == 'output_files' and isinstance(section_data, dict):
                self.config.output_files.update(section_data)
    
    def _set_config_value(self, section: str, key: str, value: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤"""
        if hasattr(self.config, section):
            section_obj = getattr(self.config, section)
            if hasattr(section_obj, key):
                current_value = getattr(section_obj, key)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(current_value, bool):
                    value = value.lower() in ('true', '1', 'yes', 'on')
                elif isinstance(current_value, int):
                    value = int(value)
                elif isinstance(current_value, float):
                    value = float(value)
                
                setattr(section_obj, key, value)
    
    def save_config(self, file_path: Optional[str] = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ YAML —Ñ–∞–π–ª
        
        Args:
            file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        """
        save_path = file_path or self.config_file
        
        config_dict = {
            'scan': {
                'max_pages_per_query': self.config.scan.max_pages_per_query,
                'delay_between_requests': self.config.scan.delay_between_requests,
                'delay_between_key_tests': self.config.scan.delay_between_key_tests,
                'max_concurrent_files': self.config.scan.max_concurrent_files,
                'timeout_seconds': self.config.scan.timeout_seconds,
                'include_recent': self.config.scan.include_recent,
                'recent_days': self.config.scan.recent_days
            },
            'cache': {
                'cache_file': self.config.cache.cache_file,
                'auto_save_threshold': self.config.cache.auto_save_threshold,
                'use_sqlite': self.config.cache.use_sqlite,
                'sqlite_file': self.config.cache.sqlite_file
            },
            'logging': {
                'level': self.config.logging.level,
                'file': self.config.logging.file,
                'max_size_mb': self.config.logging.max_size_mb,
                'backup_count': self.config.logging.backup_count,
                'format': self.config.logging.format
            },
            'security': {
                'mask_keys_in_logs': self.config.security.mask_keys_in_logs,
                'mask_keys_in_cache': self.config.security.mask_keys_in_cache,
                'mask_keys_in_output': self.config.security.mask_keys_in_output,
                'save_full_keys': self.config.security.save_full_keys
            },
            'github': {
                'api_url': self.config.github.api_url,
                'user_agent': self.config.github.user_agent,
                'rate_limit_buffer': self.config.github.rate_limit_buffer
            },
            'output_files': self.config.output_files
        }
        
        try:
            with open(save_path, 'w', encoding='utf-8') as f:
                yaml.dump(config_dict, f, default_flow_style=False, allow_unicode=True, indent=2)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def create_default_config(self, file_path: Optional[str] = None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Args:
            file_path: –ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        """
        save_path = file_path or self.config_file
        if not os.path.exists(save_path):
            self.save_config(save_path)
            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {save_path}")
        else:
            print(f"üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {save_path}")
    
    def print_config(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüìã –¢–ï–ö–£–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
        print("=" * 50)
        
        print(f"\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print(f"   –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å: {self.config.scan.max_pages_per_query}")
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.config.scan.delay_between_requests}—Å")
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏: {self.config.scan.delay_between_key_tests}—Å")
        print(f"   –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {self.config.scan.max_concurrent_files}")
        print(f"   –¢–∞–π–º–∞—É—Ç: {self.config.scan.timeout_seconds}—Å")
        print(f"   –í–∫–ª—é—á–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ: {self.config.scan.include_recent}")
        
        print(f"\nüíæ –ö—ç—à:")
        print(f"   –§–∞–π–ª –∫—ç—à–∞: {self.config.cache.cache_file}")
        print(f"   –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ: {self.config.cache.auto_save_threshold} —Ñ–∞–π–ª–æ–≤")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLite: {self.config.cache.use_sqlite}")
        
        print(f"\nüìù –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {self.config.logging.level}")
        print(f"   –§–∞–π–ª: {self.config.logging.file}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.config.logging.max_size_mb}MB")
        
        print(f"\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
        print(f"   –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –≤ –ª–æ–≥–∞—Ö: {self.config.security.mask_keys_in_logs}")
        print(f"   –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –≤ –∫—ç—à–µ: {self.config.security.mask_keys_in_cache}")
        print(f"   –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –≤ –≤—ã–≤–æ–¥–µ: {self.config.security.mask_keys_in_output}")
        
        print(f"\nüêô GitHub:")
        print(f"   –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if self.config.github.token else '‚ùå'}")
        print(f"   API URL: {self.config.github.api_url}")
        print(f"   User-Agent: {self.config.github.user_agent}")
        
        print(f"\nüìÑ –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for provider, file_path in self.config.output_files.items():
            print(f"   {provider}: {file_path}")
        
        print("=" * 50)
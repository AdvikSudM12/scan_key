"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ API –∫–ª—é—á–µ–π
"""

import logging
import logging.handlers
import sys
import os
from typing import Optional
from rich.console import Console
from rich.logging import RichHandler
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn, SpinnerColumn
from rich.table import Table
from rich.panel import Panel
from rich.text import Text

from config_manager import LoggingConfig


class MaskedFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –ª–æ–≥–æ–≤ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π API –∫–ª—é—á–µ–π"""
    
    KEY_PATTERNS = [
        (r'sk-[a-zA-Z0-9]{48,}', lambda m: f'sk-***{m.group()[-4:]}'),
        (r'sk-ant-[a-zA-Z0-9]{40,}', lambda m: f'sk-ant-***{m.group()[-4:]}'),
        (r'AIza[a-zA-Z0-9]{35,}', lambda m: f'AIza***{m.group()[-4:]}')
    ]
    
    def format(self, record):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π –∫–ª—é—á–µ–π"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = super().format(record)
        
        # –ó–∞—Ç–µ–º –º–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á–∏
        import re
        for pattern, replacer in self.KEY_PATTERNS:
            formatted = re.sub(pattern, replacer, formatted)
        
        return formatted


class ScannerLogger:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞"""
    
    def __init__(self, config: LoggingConfig, console: Optional[Console] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            console: Console –¥–ª—è Rich (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.config = config
        self.console = console or Console()
        self.logger = logging.getLogger('scanner')
        self._setup_logging()
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        level = getattr(logging, self.config.level.upper(), logging.INFO)
        self.logger.setLevel(level)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π
        formatter = MaskedFormatter(self.config.format)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        if self.config.file:
            file_handler = logging.handlers.RotatingFileHandler(
                self.config.file,
                maxBytes=self.config.max_size_mb * 1024 * 1024,  # MB to bytes
                backupCount=self.config.backup_count,
                encoding='utf-8'
            )
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        
        # Rich –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        rich_handler = RichHandler(
            console=self.console,
            rich_tracebacks=True,
            show_path=False,
            show_time=False  # –í—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ
        )
        rich_handler.setFormatter(formatter)
        self.logger.addHandler(rich_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        self.logger.propagate = False
    
    def info(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(message, **kwargs)
    
    def warning(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(message, **kwargs)
    
    def error(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        self.logger.error(message, **kwargs)
    
    def debug(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.debug(message, **kwargs)
    
    def success(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.console.print(f"‚úÖ {message}", style="green")
        self.logger.info(f"SUCCESS: {message}")
    
    def failure(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.console.print(f"‚ùå {message}", style="red")
        self.logger.error(f"FAILURE: {message}")
    
    def progress_info(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        self.console.print(f"üîÑ {message}", style="blue")
        self.logger.info(f"PROGRESS: {message}")
    
    def print_header(self, title: str, subtitle: str = None):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        text = Text(title, style="bold cyan")
        if subtitle:
            text.append(f"\n{subtitle}", style="dim")
        
        panel = Panel(text, expand=False, border_style="cyan")
        self.console.print(panel)
    
    def print_section(self, title: str):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        self.console.print(f"\nüìã {title}", style="bold yellow")
        self.console.print("‚îÄ" * (len(title) + 5), style="yellow")
    
    def print_stats_table(self, stats: dict, title: str = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        table = Table(title=title)
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        
        for key, value in stats.items():
            table.add_row(key, str(value))
        
        self.console.print(table)
    
    def create_progress_bar(self, description: str, total: int = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        Args:
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
            
        Returns:
            Progress: –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        """
        if total:
            progress = Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
                TextColumn("({task.completed}/{task.total})"),
                TimeElapsedColumn(),
                console=self.console
            )
        else:
            progress = Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                TimeElapsedColumn(),
                console=self.console
            )
        
        return progress
    
    def log_key_found(self, provider: str, masked_key: str, file_path: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á"""
        self.success(f"{provider.upper()}: –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á {masked_key} –≤ {file_path}")
    
    def log_key_invalid(self, provider: str, masked_key: str, reason: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á"""
        reason_text = f" ({reason})" if reason else ""
        self.debug(f"{provider.upper()}: –ö–ª—é—á {masked_key} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π{reason_text}")
    
    def log_file_processed(self, file_path: str, keys_found: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        if keys_found > 0:
            self.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {file_path}: –Ω–∞–π–¥–µ–Ω–æ {keys_found} –∫–ª—é—á–µ–π")
        else:
            self.debug(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {file_path}: –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def log_cache_operation(self, operation: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º"""
        self.debug(f"üíæ –ö—ç—à: {operation} {details}")
    
    def log_rate_limit(self, api_type: str, remaining: int, reset_time: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö API"""
        if remaining < 10:
            self.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ {api_type} API: {remaining}")
        else:
            self.debug(f"üìä {api_type} API: –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    def log_scan_summary(self, total_files: int, total_keys: int, valid_keys: int, scan_time: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_section("–ò–¢–û–ì–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        
        stats = {
            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤": total_files,
            "–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π": total_keys,
            "–í–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π": valid_keys,
            "–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è": f"{scan_time:.1f} —Å–µ–∫",
            "–°–∫–æ—Ä–æ—Å—Ç—å": f"{total_files/scan_time:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫" if scan_time > 0 else "N/A"
        }
        
        self.print_stats_table(stats)
        
        if valid_keys > 0:
            self.success(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {valid_keys} –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
        else:
            self.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


class ProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, logger: ScannerLogger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Args:
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.logger = logger
        self.progress = None
        self.tasks = {}
    
    def start_progress(self, description: str = "–û–±—Ä–∞–±–æ—Ç–∫–∞"):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress = self.logger.create_progress_bar(description)
        self.progress.start()
        return self.progress
    
    def add_task(self, task_id: str, description: str, total: int = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if self.progress:
            task = self.progress.add_task(description, total=total)
            self.tasks[task_id] = task
            return task
        return None
    
    def update_task(self, task_id: str, advance: int = 1, description: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏"""
        if self.progress and task_id in self.tasks:
            kwargs = {'advance': advance}
            if description:
                kwargs['description'] = description
            
            self.progress.update(self.tasks[task_id], **kwargs)
    
    def complete_task(self, task_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É"""
        if self.progress and task_id in self.tasks:
            task = self.tasks[task_id]
            self.progress.update(task, completed=self.progress.tasks[task].total or 100)
    
    def stop_progress(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress:
            self.progress.stop()
            self.progress = None
            self.tasks.clear()
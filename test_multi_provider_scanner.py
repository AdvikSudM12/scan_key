#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
"""

import os
import json
from dotenv import load_dotenv
from enhanced_scanner import EnhancedMultiProviderGitHubScanner
from ai_providers_key_patterns import AI_PROVIDERS_PATTERNS, get_all_patterns

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_pattern_identification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∫–ª—é—á–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    scanner = EnhancedMultiProviderGitHubScanner()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    test_keys = {
        'openai': [
            'sk-1234567890abcdef1234567890abcdef12345678',  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            'sk-proj-abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijk',  # –ù–æ–≤—ã–π
            'sk-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',  # –û–±—â–∏–π
        ],
        'anthropic': [
            'sk-ant-api03-R2DabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789',
            'sk-ant-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
        ],
        'google_gemini': [
            'AIzaSyDabcdefghijklmnopqrstuvwxyzABCDEFGH',
            'AIzaBCdefghijklmnopqrstuvwxyz1234567890ABC',
        ]
    }
    
    all_correct = True
    
    for expected_provider, keys in test_keys.items():
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {expected_provider.upper()}:")
        for i, key in enumerate(keys, 1):
            identified = scanner.identify_provider(key)
            if identified == expected_provider:
                print(f"   ‚úÖ –ö–ª—é—á {i}: {key[:20]}... ‚Üí {identified}")
            else:
                print(f"   ‚ùå –ö–ª—é—á {i}: {key[:20]}... ‚Üí {identified} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_provider})")
                all_correct = False
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏' if all_correct else '‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏'}")
    return all_correct


def test_key_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–π")
    print("=" * 50)
    
    scanner = EnhancedMultiProviderGitHubScanner()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∫–ª—é—á–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    test_content = '''
    # OpenAI configuration
    OPENAI_API_KEY=sk-1234567890abcdef1234567890abcdef12345678
    openai.api_key = "sk-proj-abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijk"
    
    # Anthropic configuration
    ANTHROPIC_API_KEY="sk-ant-api03-R2DabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"
    claude_key = sk-ant-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
    
    # Google Gemini configuration
    GOOGLE_API_KEY=AIzaSyDabcdefghijklmnopqrstuvwxyzABCDEFGH
    google_ai_key: "AIzaBCdefghijklmnopqrstuvwxyz1234567890ABC"
    
    # –í JSON
    {
        "api_keys": {
            "openai": "sk-testkey1234567890abcdef1234567890abcdef123",
            "anthropic": "sk-ant-testkey1234567890abcdef1234567890abcdef123456789",
            "google": "AIzaTestKey1234567890abcdef1234567890ABC"
        }
    }
    '''
    
    extracted_keys = scanner.extract_api_keys(test_content)
    print(f"üîë –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–ª—é—á–µ–π: {len(extracted_keys)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–ª—é—á
    provider_counts = {'openai': 0, 'anthropic': 0, 'google_gemini': 0, 'unknown': 0}
    
    for key in extracted_keys:
        provider = scanner.identify_provider(key)
        if provider:
            provider_counts[provider] += 1
            print(f"   ‚úÖ {provider.upper()}: {key[:20]}...")
        else:
            provider_counts['unknown'] += 1
            print(f"   ‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô: {key[:20]}...")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")
    for provider, count in provider_counts.items():
        if count > 0:
            print(f"   {provider.upper()}: {count} –∫–ª—é—á–µ–π")
    
    return len(extracted_keys) > 0


def test_file_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    print("=" * 50)
    
    scanner = EnhancedMultiProviderGitHubScanner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
    for provider, filename in scanner.valid_keys_files.items():
        if os.path.exists(filename):
            print(f"   ‚úÖ {provider.upper()}: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                if 'scan_info' in data and 'valid_keys' in data:
                    print(f"      üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    print(f"      üîë –ö–ª—é—á–µ–π: {len(data['valid_keys'])}")
                else:
                    print(f"      ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"   ‚ùå {provider.upper()}: –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    return True


def test_search_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 50)
    
    scanner = EnhancedMultiProviderGitHubScanner()
    queries = scanner.get_search_queries(include_recent=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    openai_queries = [q for q in queries if any(term in q.lower() for term in ['openai', 'sk-'])]
    anthropic_queries = [q for q in queries if any(term in q.lower() for term in ['anthropic', 'claude', 'sk-ant'])]
    google_queries = [q for q in queries if any(term in q.lower() for term in ['google', 'gemini', 'aiza'])]
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
    print(f"   ü§ñ OpenAI: {len(openai_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"   ü§ñ Anthropic: {len(anthropic_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")  
    print(f"   ü§ñ Google: {len(google_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for provider, provider_queries in [('OpenAI', openai_queries[:3]), ('Anthropic', anthropic_queries[:2]), ('Google', google_queries[:2])]:
        print(f"   {provider}:")
        for query in provider_queries:
            print(f"      - {query}")
    
    return len(queries) > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ü–†–û–í–ê–ô–î–ï–†–ù–û–ì–û –°–ö–ê–ù–ï–†–ê")
    print("üë®‚Äçüíª –ê–≤—Ç–æ—Ä: PRIZRAKJJ | Telegram: t.me/SafeVibeCode")
    print("=" * 70)
    
    tests = [
        ("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", test_pattern_identification),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π", test_key_extraction),
        ("–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", test_file_structure),
        ("–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã", test_search_queries),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∫–∞–Ω–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")


if __name__ == "__main__":
    main()

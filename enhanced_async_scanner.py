"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
–í–µ—Ä—Å–∏—è 4.0 —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
"""

import asyncio
import logging
import re
import json
import os
from typing import List, Dict, Set, Optional
from datetime import datetime, timedelta
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from tqdm.asyncio import tqdm
from rich.console import Console
from rich.progress import Progress, BarColumn, TextColumn, TimeElapsedColumn
from rich.logging import RichHandler

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from validators import ValidatorFactory
from cache_manager import CacheManager
from github_client import GitHubClient
from ai_providers_key_patterns import get_all_patterns
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RichHandler(rich_tracebacks=True),
        logging.FileHandler("scanner.log", encoding="utf-8")
    ]
)

logger = logging.getLogger(__name__)
console = Console()


class EnhancedAsyncGitHubScanner:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ API –∫–ª—é—á–µ–π
    """
    
    def __init__(self, github_token: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞
        
        Args:
            github_token: –¢–æ–∫–µ–Ω GitHub API
        """
        self.github_client = GitHubClient(github_token)
        self.cache_manager = CacheManager()
        self.validator_factory = ValidatorFactory()
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π
        self.valid_keys = {
            'openai': [],
            'anthropic': [],
            'google_gemini': []
        }
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.valid_keys_files = {
            'openai': 'valid_openai_keys.json',
            'anthropic': 'valid_anthropic_keys.json',
            'google_gemini': 'valid_google_gemini_keys.json'
        }
        
        self.console = Console()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._ensure_files_exist()
        self._load_all_valid_keys()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä {'—Å —Ç–æ–∫–µ–Ω–æ–º GitHub' if github_token else '–±–µ–∑ —Ç–æ–∫–µ–Ω–∞ GitHub'}")
    
    def _ensure_files_exist(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        for provider, filename in self.valid_keys_files.items():
            if not os.path.exists(filename):
                initial_data = {
                    'provider': provider,
                    'valid_keys': [],
                    'last_updated': datetime.now().isoformat(),
                    'total_found': 0
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(initial_data, f, indent=2, ensure_ascii=False)
                
                console.print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è {provider.upper()}: {filename}")
    
    def _load_all_valid_keys(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        for provider, filename in self.valid_keys_files.items():
            try:
                if os.path.exists(filename):
                    with open(filename, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        self.valid_keys[provider] = data.get('valid_keys', [])
                        
                console.print(f"üìÑ {provider.upper()}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.valid_keys[provider])} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π {provider}: {e}")
                self.valid_keys[provider] = []
    
    def extract_api_keys(self, content: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        keys = []
        patterns = get_all_patterns()
        
        for pattern in patterns:
            matches = pattern.findall(content)
            keys.extend(matches)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏
        unique_keys = list(set(keys))
        filtered_keys = [key for key in unique_keys if len(key) >= 20]
        
        return filtered_keys
    
    async def validate_key_async(self, api_key: str, provider: str) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–ª—é—á–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache_manager.is_key_tested(api_key):
            logger.debug(f"–ö–ª—é—á {self._mask_key(api_key)} —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω (–∫—ç—à)")
            return False
        
        validator = self.validator_factory.create_validator(provider)
        if not validator:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {provider}")
            return False
        
        try:
            is_valid = await validator.validate_async(api_key)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            self.cache_manager.mark_key_tested(api_key)
            
            if is_valid:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á {provider.upper()}: {self._mask_key(api_key)}")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞ {provider}: {e}")
            return False
    
    def validate_key_sync(self, api_key: str, provider: str) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ (–¥–ª—è backward compatibility)
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–ª—é—á–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache_manager.is_key_tested(api_key):
            logger.debug(f"–ö–ª—é—á {self._mask_key(api_key)} —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω (–∫—ç—à)")
            return False
        
        validator = self.validator_factory.create_validator(provider)
        if not validator:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {provider}")
            return False
        
        try:
            is_valid = validator.validate_sync(api_key)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            self.cache_manager.mark_key_tested(api_key)
            
            if is_valid:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á {provider.upper()}: {self._mask_key(api_key)}")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞ {provider}: {e}")
            return False
    
    def _mask_key(self, api_key: str) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç API –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if len(api_key) <= 8:
            return "*" * len(api_key)
        return f"{api_key[:4]}{'*' * (len(api_key) - 8)}{api_key[-4:]}"
    
    async def process_file_async(self, file_info: Dict) -> List[Dict]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        
        Args:
            file_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –∏–∑ GitHub API
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        found_keys = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
            file_id = f"{file_info['repository']['full_name']}:{file_info['path']}:{file_info.get('sha', 'unknown')}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if self.cache_manager.is_file_processed(file_id):
                logger.debug(f"–§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∫—ç—à): {file_info['path']}")
                return found_keys
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = await self.github_client.get_file_content_async(
                file_info['repository']['owner']['login'],
                file_info['repository']['name'],
                file_info['path']
            )
            
            if not content:
                return found_keys
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏
            potential_keys = self.extract_api_keys(content)
            
            if potential_keys:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ {file_info['path']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
                for api_key in potential_keys:
                    provider = self.validator_factory.identify_provider(api_key)
                    
                    if provider:
                        is_valid = await self.validate_key_async(api_key, provider)
                        
                        if is_valid:
                            key_info = {
                                'api_key': api_key,
                                'provider': provider,
                                'repository': file_info['repository']['full_name'],
                                'file_path': file_info['path'],
                                'file_url': file_info['html_url'],
                                'updated_at': file_info['repository'].get('updated_at', ''),
                                'found_at': datetime.now().isoformat()
                            }
                            
                            found_keys.append(key_info)
                            self.valid_keys[provider].append(key_info)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª
                            await self._save_valid_key_async(api_key, provider, key_info)
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                        await asyncio.sleep(1)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.cache_manager.mark_file_processed(file_id)
            
            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞
            if self.cache_manager.auto_save_threshold():
                self.cache_manager.save_cache()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_info.get('path', 'unknown')}: {e}")
        
        return found_keys
    
    async def _save_valid_key_async(self, api_key: str, provider: str, key_info: Dict):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª
        
        Args:
            api_key: API –∫–ª—é—á
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä
            key_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ
        """
        try:
            filename = self.valid_keys_files[provider]
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {
                    'provider': provider,
                    'valid_keys': [],
                    'last_updated': datetime.now().isoformat(),
                    'total_found': 0
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞
            existing_keys = [k['api_key'] for k in data['valid_keys']]
            if api_key not in existing_keys:
                # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                masked_key_info = key_info.copy()
                masked_key_info['api_key'] = self._mask_key(api_key)
                
                data['valid_keys'].append(masked_key_info)
                data['total_found'] = len(data['valid_keys'])
                data['last_updated'] = datetime.now().isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                
                logger.info(f"‚úÖ {provider.upper()}: –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –≤ {filename}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ {provider}: {e}")
    
    async def scan_repositories_async(self, max_pages_per_query: int = 3) -> Dict[str, List[Dict]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            max_pages_per_query: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å
            
        Returns:
            Dict[str, List[Dict]]: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        """
        console.print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è GitHub")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        queries = self.github_client.get_search_queries()
        
        all_found_keys = []
        
        with Progress(
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            query_task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", total=len(queries))
            
            for query in queries:
                try:
                    console.print(f"üîç –ü–æ–∏—Å–∫: {query}")
                    
                    for page in range(1, max_pages_per_query + 1):
                        try:
                            results = await self.github_client.search_code_async(query, page)
                            items = results.get('items', [])
                            
                            if not items:
                                break
                            
                            console.print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(items)} —Ñ–∞–π–ª–æ–≤")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                            tasks = []
                            for item in items:
                                task = self.process_file_async(item)
                                tasks.append(task)
                            
                            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_results = await asyncio.gather(*tasks, return_exceptions=True)
                            
                            for result in page_results:
                                if isinstance(result, list):
                                    all_found_keys.extend(result)
                            
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                            await asyncio.sleep(2)
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                            break
                    
                    progress.advance(query_task)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(3)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                    progress.advance(query_task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
        self.cache_manager.save_cache()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        results_by_provider = {'openai': [], 'anthropic': [], 'google_gemini': []}
        for key_info in all_found_keys:
            provider = key_info.get('provider')
            if provider in results_by_provider:
                results_by_provider[provider].append(key_info)
        
        return results_by_provider
    
    def scan_repositories_sync(self, max_pages_per_query: int = 3) -> Dict[str, List[Dict]]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è backward compatibility)
        
        Args:
            max_pages_per_query: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å
            
        Returns:
            Dict[str, List[Dict]]: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –Ω–æ–≤–æ–º event loop
        return asyncio.run(self.scan_repositories_async(max_pages_per_query))
    
    def get_cache_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        return self.cache_manager.get_stats()
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.cache_manager.clear_cache()
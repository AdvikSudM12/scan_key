#!/usr/bin/env python3
"""
–§–æ—Ä–º–∞—Ç—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã API-–∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
–°–æ–±—Ä–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–¥–µ–∫–∞–±—Ä—å 2024)
"""

import re
from typing import Dict, List, NamedTuple
from enum import Enum


class ProviderInfo(NamedTuple):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ AI"""
    name: str
    patterns: List[re.Pattern]
    validation_url: str
    header_name: str
    description: str


class AIProvider(Enum):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
    OPENAI = "openai"
    ANTHROPIC = "anthropic"
    GOOGLE_GEMINI = "google_gemini"


# –ü–∞—Ç—Ç–µ—Ä–Ω—ã API-–∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
AI_PROVIDERS_PATTERNS = {
    AIProvider.OPENAI: ProviderInfo(
        name="OpenAI",
        patterns=[
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: sk- + 48 —Å–∏–º–≤–æ–ª–æ–≤
            re.compile(r'sk-[A-Za-z0-9]{48}'),
            # –ù–æ–≤—ã–π project —Ñ–æ—Ä–º–∞—Ç: sk-proj- + 95-200 —Å–∏–º–≤–æ–ª–æ–≤
            re.compile(r'sk-proj-[A-Za-z0-9\-_]{95,200}'),
            # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ª—é–±—ã—Ö sk- –∫–ª—é—á–µ–π
            re.compile(r'sk-[A-Za-z0-9\-_]{40,200}'),
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Å T3BlbkFJ (base64 "OpenAI")
            re.compile(r'sk-[a-zA-Z0-9]{20}T3BlbkFJ[a-zA-Z0-9]{20}'),
        ],
        validation_url="https://api.openai.com/v1/models",
        header_name="Authorization",  # Bearer TOKEN
        description="OpenAI API –∫–ª—é—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'sk-' –∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"
    ),
    
    AIProvider.ANTHROPIC: ProviderInfo(
        name="Anthropic (Claude)",
        patterns=[
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: sk-ant-api03- + —Å–∏–º–≤–æ–ª—ã
            re.compile(r'sk-ant-api03-[A-Za-z0-9\-_]{95,200}'),
            # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Anthropic
            re.compile(r'sk-ant-[A-Za-z0-9\-_]{40,200}'),
        ],
        validation_url="https://api.anthropic.com/v1/messages",
        header_name="x-api-key",
        description="Anthropic API –∫–ª—é—á–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'sk-ant-' –∏ –∏–º–µ—é—Ç —á–∞—Å—Ç–∏—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–∏–¥–∞ 'sk-ant-api03-R2D...igAA'"
    ),
    
    AIProvider.GOOGLE_GEMINI: ProviderInfo(
        name="Google Gemini",
        patterns=[
            # API –∫–ª—é—á–∏ Google –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å AIza
            re.compile(r'AIza[A-Za-z0-9\-_]{35}'),
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Google API –∫–ª—é—á–µ–π
            re.compile(r'[A-Za-z0-9\-_]{39}'),  # 39 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
        ],
        validation_url="https://generativelanguage.googleapis.com/v1/models",
        header_name="Authorization",  # Bearer TOKEN –∏–ª–∏ x-goog-api-key
        description="Google Gemini API –∫–ª—é—á–∏ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'AIza' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç 39 —Å–∏–º–≤–æ–ª–æ–≤"
    )
}


def get_all_patterns() -> List[re.Pattern]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ API-–∫–ª—é—á–µ–π –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    
    Returns:
        List[re.Pattern]: –°–ø–∏—Å–æ–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    """
    all_patterns = []
    for provider_info in AI_PROVIDERS_PATTERNS.values():
        all_patterns.extend(provider_info.patterns)
    return all_patterns


def identify_provider(api_key: str) -> List[AIProvider]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ API-–∫–ª—é—á–∞
    
    Args:
        api_key: API –∫–ª—é—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        List[AIProvider]: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    """
    matching_providers = []
    
    for provider, info in AI_PROVIDERS_PATTERNS.items():
        for pattern in info.patterns:
            if pattern.match(api_key):
                matching_providers.append(provider)
                break
    
    return matching_providers


def get_provider_info(provider: AIProvider) -> ProviderInfo:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    
    Args:
        provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
        
    Returns:
        ProviderInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    """
    return AI_PROVIDERS_PATTERNS.get(provider)


def print_patterns_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã API-–∫–ª—é—á–µ–π –¥–ª—è AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    print("=" * 60)
    
    for provider, info in AI_PROVIDERS_PATTERNS.items():
        print(f"\nüì° {info.name} ({provider.value}):")
        print(f"   üìã –û–ø–∏—Å–∞–Ω–∏–µ: {info.description}")
        print(f"   üîó URL –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {info.validation_url}")
        print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {info.header_name}")
        print(f"   üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω—ã ({len(info.patterns)}):")
        
        for i, pattern in enumerate(info.patterns, 1):
            print(f"      {i}. {pattern.pattern}")
    
    print(f"\nüìä –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {sum(len(info.patterns) for info in AI_PROVIDERS_PATTERNS.values())}")
    print("=" * 60)


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    print_patterns_summary()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_keys = [
        "sk-1234567890abcdef1234567890abcdef12345678",  # OpenAI —Å—Ç–∞—Ä—ã–π
        "sk-proj-abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijk",  # OpenAI –Ω–æ–≤—ã–π
        "sk-ant-api03-R2DabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789",  # Anthropic
        "AIzaSyDabcdefghijklmnopqrstuvwxyzABCDEFGH",  # Google Gemini
    ]
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–ª—é—á–µ–π:")
    print("-" * 40)
    
    for key in test_keys:
        providers = identify_provider(key)
        if providers:
            provider_names = ", ".join([AI_PROVIDERS_PATTERNS[p].name for p in providers])
            print(f"‚úÖ {key[:20]}... ‚Üí {provider_names}")
        else:
            print(f"‚ùå {key[:20]}... ‚Üí –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

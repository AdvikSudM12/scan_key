#!/usr/bin/env python3
"""
Enhanced Multi-Provider GitHub Scanner v4.0 - –û—Å–Ω–æ–≤–Ω–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–° –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é, —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""

import asyncio
import sys
import os
import time
from typing import Optional

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config_manager import ConfigManager
from enhanced_logging import ScannerLogger, ProgressTracker
from analytics import AnalyticsManager
from enhanced_async_scanner import EnhancedAsyncGitHubScanner
from enhanced_scanner import EnhancedMultiProviderGitHubScanner  # Backward compatibility
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class EnhancedScannerCLI:
    """–û—Å–Ω–æ–≤–Ω–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI"""
        self.config_manager = ConfigManager()
        self.config = self.config_manager.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        self.logger = ScannerLogger(self.config.logging)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.analytics = AnalyticsManager()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–µ—Ä
        self.progress_tracker = ProgressTracker(self.logger)
        
        # –°–∫–∞–Ω–µ—Ä—ã
        self.async_scanner: Optional[EnhancedAsyncGitHubScanner] = None
        self.sync_scanner: Optional[EnhancedMultiProviderGitHubScanner] = None
    
    def print_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.print_header(
            "üöÄ ENHANCED MULTI-PROVIDER GITHUB SCANNER v4.0",
            "–ü–æ–∏—Å–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: OpenAI, Anthropic (Claude), Google Gemini\n"
            "üë®‚Äçüíª –ê–≤—Ç–æ—Ä: PRIZRAKJJ | Telegram: t.me/SafeVibeCode"
        )
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.logger.print_section("–ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω GitHub
        if self.config.github.token:
            self.logger.success("GitHub —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.logger.warning("GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã API")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_keys = {
            'OpenAI': os.getenv('OPENAI_API_KEY'),
            'Anthropic': os.getenv('ANTHROPIC_API_KEY'),
            'Google Gemini': os.getenv('GOOGLE_API_KEY')
        }
        
        available_keys = {k: v for k, v in test_keys.items() if v}
        
        if available_keys:
            self.logger.success(f"–ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è {len(available_keys)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            for provider in available_keys.keys():
                self.logger.info(f"   ‚úÖ {provider}")
        else:
            self.logger.warning("–¢–µ—Å—Ç–æ–≤—ã–µ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.logger.info("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ .env:")
            self.logger.info("   - OPENAI_API_KEY=sk-...")
            self.logger.info("   - ANTHROPIC_API_KEY=sk-ant-...")
            self.logger.info("   - GOOGLE_API_KEY=AIza...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config_manager.print_config()
    
    def handle_special_commands(self) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        """
        import argparse
        
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument('--clear-cache', action='store_true')
        parser.add_argument('--show-analytics', action='store_true')
        parser.add_argument('--export-report', type=str)
        parser.add_argument('--create-config', action='store_true')
        parser.add_argument('--test-validation', action='store_true')
        parser.add_argument('--async-mode', action='store_true')
        parser.add_argument('--help', action='store_true')
        
        args, unknown = parser.parse_known_args()
        
        if args.help:
            self.show_help()
            return True
        
        if args.create_config:
            self.config_manager.create_default_config()
            return True
        
        if args.clear_cache:
            self.clear_cache()
            return True
        
        if args.show_analytics:
            self.show_analytics()
            return True
        
        if args.export_report:
            self.export_analytics_report(args.export_report)
            return True
        
        if args.test_validation:
            self.test_validation_functions()
            return True
        
        return False
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        self.logger.print_section("–°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        
        help_text = """
üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:
   --async-mode             –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
   --config PATH           –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   --github-token TOKEN    –¢–æ–∫–µ–Ω GitHub API
   --max-pages N           –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∑–∞–ø—Ä–æ—Å
   --delay-requests N      –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)
   --log-level LEVEL       –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
   --clear-cache           –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
   --test-validation       –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   --show-analytics        –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
   --export-report FILE    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   --create-config         –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   --help                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìÑ –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
   config.yaml             –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   .env                    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–∫–µ–Ω—ã, –∫–ª—é—á–∏)

üîç –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
   –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º       –ë—ã—Å—Ç—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
   –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º        –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
   scanner_analytics.json  –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   scanner.log            –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã

üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
   –í—Å–µ –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –∏ –≤—ã–≤–æ–¥–µ
   –ü–æ–ª–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        
        print(help_text)
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.logger.print_section("–û–ß–ò–°–¢–ö–ê –ö–≠–®–ê")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
        scanner = EnhancedMultiProviderGitHubScanner(self.config.github.token)
        scanner.clear_cache()
        
        self.logger.success("–ö—ç—à –æ—á–∏—â–µ–Ω")
    
    def show_analytics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        self.logger.print_section("–ê–ù–ê–õ–ò–¢–ò–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if self.analytics.current_session:
            current_stats = self.analytics.get_current_stats()
            self.logger.print_stats_table(current_stats, "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è")
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        historical_stats = self.analytics.get_historical_stats(30)
        if historical_stats:
            self.logger.print_stats_table(historical_stats, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        trends = self.analytics.get_trends_analysis()
        if trends:
            self.logger.print_stats_table(trends, "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
    
    def export_analytics_report(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.logger.print_section("–≠–ö–°–ü–û–†–¢ –û–¢–ß–ï–¢–ê")
        self.analytics.export_report(file_path)
    
    def test_validation_functions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.logger.print_section("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä
        scanner = EnhancedMultiProviderGitHubScanner(self.config.github.token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
        test_keys = {
            'openai': os.getenv('OPENAI_API_KEY'),
            'anthropic': os.getenv('ANTHROPIC_API_KEY'),
            'google_gemini': os.getenv('GOOGLE_API_KEY')
        }
        
        available_keys = {k: v for k, v in test_keys.items() if v}
        
        if not available_keys:
            self.logger.warning("–¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        validation_results = {}
        
        for provider, key in available_keys.items():
            self.logger.info(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider.upper()}")
            masked_key = f"{key[:8]}***{key[-4:]}"
            self.logger.info(f"   –ö–ª—é—á: {masked_key}")
            
            try:
                is_valid = scanner.validate_api_key(key, provider)
                validation_results[provider] = is_valid
                
                if is_valid:
                    self.logger.success(f"–í–∞–ª–∏–¥–∞—Ü–∏—è {provider.upper()} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.logger.failure(f"–ö–ª—é—á {provider.upper()} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {provider.upper()}: {e}")
                validation_results[provider] = False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        working_validators = sum(1 for result in validation_results.values() if result)
        total_validators = len(validation_results)
        
        self.logger.print_stats_table({
            '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤': total_validators,
            '–†–∞–±–æ—Ç–∞—é—â–∏—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤': working_validators,
            '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å': f"{working_validators/total_validators*100:.1f}%" if total_validators > 0 else "0%"
        }, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    async def run_async_scan(self) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.print_section("–ê–°–ò–ù–•–†–û–ù–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
        self.async_scanner = EnhancedAsyncGitHubScanner(self.config.github.token)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        session_id = self.analytics.start_session(config=self.config.__dict__)
        self.logger.info(f"–ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {session_id}")
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            results = await self.async_scanner.scan_repositories_async(
                max_pages_per_query=self.config.scan.max_pages_per_query
            )
            
            scan_time = time.time() - start_time
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            self.analytics.end_session()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
            total_valid = sum(len(keys) for keys in results.values())
            current_stats = self.analytics.get_current_stats()
            
            self.logger.log_scan_summary(
                current_stats.get('files_processed', 0),
                current_stats.get('keys_found', 0),
                total_valid,
                scan_time
            )
            
            return results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.analytics.record_error('scan_error', str(e))
            return {}
    
    def run_sync_scan(self) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        self.logger.print_section("–°–ò–ù–•–†–û–ù–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä
        self.sync_scanner = EnhancedMultiProviderGitHubScanner(self.config.github.token)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        session_id = self.analytics.start_session(config=self.config.__dict__)
        self.logger.info(f"–ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {session_id}")
        
        start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            results = self.sync_scanner.scan_repositories(
                max_pages_per_query=self.config.scan.max_pages_per_query
            )
            
            scan_time = time.time() - start_time
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            self.analytics.end_session()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
            total_valid = sum(len(keys) for keys in results.values())
            current_stats = self.analytics.get_current_stats()
            
            self.logger.log_scan_summary(
                current_stats.get('files_processed', 0),
                current_stats.get('keys_found', 0),
                total_valid,
                scan_time
            )
            
            return results
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.analytics.record_error('scan_error', str(e))
            return {}
    
    def print_results(self, results: dict):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger.print_section("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        
        total_found = sum(len(keys) for keys in results.values())
        
        if total_found == 0:
            self.logger.info("ü§∑ –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            return
        
        for provider in ['openai', 'anthropic', 'google_gemini']:
            provider_keys = results.get(provider, [])
            
            self.logger.info(f"\nü§ñ {provider.upper().replace('_', ' ')}:")
            
            if provider_keys:
                for i, key_info in enumerate(provider_keys, 1):
                    # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                    if self.config.security.mask_keys_in_output:
                        key_display = key_info.get('masked_key', '–∫–ª—é—á –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω')
                    else:
                        key_display = f"{key_info['api_key'][:8]}***{key_info['api_key'][-4:]}"
                    
                    self.logger.info(f"   {i}. üîë {key_display}")
                    self.logger.info(f"      üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {key_info['repository']}")
                    self.logger.info(f"      üìÑ –§–∞–π–ª: {key_info['file_path']}")
                    if key_info.get('found_at'):
                        self.logger.info(f"      üïí –ù–∞–π–¥–µ–Ω: {key_info['found_at']}")
            else:
                self.logger.info("   ‚ùå –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        self.logger.success(f"–ò–¢–û–ì–û: {total_found} –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω–æ")
    
    async def main(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
            self.print_banner()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if self.handle_special_commands():
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            self.check_environment()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            import argparse
            parser = argparse.ArgumentParser(add_help=False)
            parser.add_argument('--async-mode', action='store_true')
            args, unknown = parser.parse_known_args()
            
            use_async = args.async_mode
            
            if use_async:
                self.logger.info("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
                results = await self.run_async_scan()
            else:
                self.logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (backward compatibility)")
                results = self.run_sync_scan()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.print_results(results)
            
        except KeyboardInterrupt:
            self.logger.warning("\n‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if self.analytics.current_session:
                self.analytics.end_session()
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.analytics.current_session:
                self.analytics.record_error('critical_error', str(e))
                self.analytics.end_session()
        finally:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            if hasattr(self, 'analytics'):
                final_stats = self.analytics.get_current_stats()
                if final_stats:
                    self.logger.print_stats_table(final_stats, "–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    cli = EnhancedScannerCLI()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ asyncio
    try:
        asyncio.run(cli.main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
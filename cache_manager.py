"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ API –∫–ª—é—á–µ–π
"""

import json
import os
from datetime import datetime
from typing import Set, Dict, List, Any
from pathlib import Path


class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    
    def __init__(self, cache_file: str = 'scanner_cache.json'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
        
        Args:
            cache_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞
        """
        self.cache_file = cache_file
        self.processed_files: Set[str] = set()
        self.tested_keys: Set[str] = set()
        self._load_cache()
    
    def _load_cache(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                    self.processed_files = set(cache_data.get('processed_files', []))
                    self.tested_keys = set(cache_data.get('tested_keys', []))
                    
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {len(self.processed_files)} —Ñ–∞–π–ª–æ–≤, {len(self.tested_keys)} –∫–ª—é—á–µ–π")
            else:
                print("üìÇ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            self.processed_files = set()
            self.tested_keys = set()
    
    def save_cache(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            cache_data = {
                'processed_files': list(self.processed_files),
                'tested_keys': list(self.tested_keys),
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        try:
            if os.path.exists(self.cache_file):
                os.remove(self.cache_file)
            
            self.processed_files = set()
            self.tested_keys = set()
            print("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    def is_file_processed(self, file_identifier: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        return file_identifier in self.processed_files
    
    def mark_file_processed(self, file_identifier: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        self.processed_files.add(file_identifier)
    
    def is_key_tested(self, api_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∫–ª—é—á —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω"""
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        masked_key = self._mask_key_for_cache(api_key)
        return masked_key in self.tested_keys
    
    def mark_key_tested(self, api_key: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –∫–ª—é—á –∫–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"""
        # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        masked_key = self._mask_key_for_cache(api_key)
        self.tested_keys.add(masked_key)
    
    def _mask_key_for_cache(self, api_key: str) -> str:
        """
        –ú–∞—Å–∫–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à–µ
        
        Args:
            api_key: –ò—Å—Ö–æ–¥–Ω—ã–π API –∫–ª—é—á
            
        Returns:
            str: –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        """
        if len(api_key) <= 8:
            return "*" * len(api_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ + —Ö—ç—à
        import hashlib
        key_hash = hashlib.md5(api_key.encode()).hexdigest()[:8]
        return f"{api_key[:4]}***{api_key[-4:]}_{key_hash}"
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        """
        return {
            'processed_files': len(self.processed_files),
            'tested_keys': len(self.tested_keys),
            'cache_file_exists': os.path.exists(self.cache_file),
            'cache_file_size': os.path.getsize(self.cache_file) if os.path.exists(self.cache_file) else 0
        }
    
    def auto_save_threshold(self, threshold: int = 10) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à
        
        Args:
            threshold: –ü–æ—Ä–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        """
        return len(self.processed_files) % threshold == 0